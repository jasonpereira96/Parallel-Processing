optimalSize = totalElements/totalProcessors

continue = 1
do while(continue > 0)
	numberOfElements = 0
	if id = 0 then
		extraElementsSize = size(localArray) − optimalSize
		>> Send the number of extraElements elements to the next processor 
		send(extraElementsSize, 1, INT, id + 1, ELEMENTS_TRANS_ID)
	end if
	if id > 0 then
	>> Receive and send number of extra elements
		recv(&numberOfElements, 1, INT, id − 1, NUM_QUERY_ID) 
		if numberOfElements > 0 and id < P - 1 then
			extraElementsSize = size(localArray) − optimalSize + numberOfElements
			>> Send the number of extraElements elements to the next processor
			send(extraElementsSize, 1, INT, id + 1, ELEMENTS_TRANS_ID)
	end if
	>> letting everyone know to continue
	if extraElementsSize > 0.2*optimalSize then
		continue = 1
	end if
	Broadcast(&continue,1,INT,id,MPI_COMM_WORLD)
	MPI_Barrier
	if (continue = 1) then
		>> Find elements to send
		recvElements[numberOfElements]
		if extraElementsSize > 0 then
			if extraElementsSize >= size(localArray) then
				>> 1. Find the k greatest elements where k = extraElementsSize
				extraElements[extraElementsSize]
				extraElements = f indKGreatest(localArray, extraElementsSize)
				>> 2. Remove extraElements elements from localArray
				localArray = remove(localArray, extraElements)
				>> 3. Send extraElements to next processor
				Isend(&extraElements, extraElementsSize, INT, id + 1, ELEMENT S T RANS ID)
			end if
		end if
		if numberOfElements > 0 then
			>> Recieve those elements
			Irecv(&recvElements, numberOfElements, INT, id − 1, ELEMENT S T RANS ID)
			>> Merge recieved elements to the start of the array
			localArray = mergeStart(recvElements, localArray)
		end if
	end if
end do while